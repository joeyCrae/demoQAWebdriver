{"version":3,"file":"saveWebElement.js","sourceRoot":"","sources":["../../src/commands/saveWebElement.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4DAAoE;AACpE,kDAA6D;AAC7D,uFAA6D;AAC7D,qFAA2D;AAO3D,wDAAmE;AAEnE,2GAAiF;AACjF,gDAAuD;AACvD,iGAAuE;AAKvE,SAA8B,cAAc,CACxC,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,OAAiC,EACjC,GAAW,EACX,kBAAsC,EAEtC,eAAwB;;;;;;oBAGlB,KACF,kBAAkB,CAAC,GAAG,EADlB,uBAAuB,6BAAA,EAAE,iBAAiB,uBAAA,EAAE,eAAe,qBAAA,EAAE,QAAQ,cAAA,EAAE,eAAe,qBAAA,EAAE,oBAAoB,0BAAA,CAC1F;oBAClB,QAAQ,GAAwC,OAAO,SAA/C,EAAE,UAAU,GAA4B,OAAO,WAAnC,EAAE,qBAAqB,GAAK,OAAO,sBAAZ,CAAY;oBAEzD,mBAAmB,GAAY,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,KAAK,SAAS;wBAC5F,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC;wBACxD,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAA;oBAC1C,mBAAmB,GAAY,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,KAAK,SAAS;wBAC5F,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC;wBACxD,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAA;oBAC1C,cAAc,GAAY,kBAAkB,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS;wBAClF,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,cAAc,CAAC;wBACnD,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAA;oBACrC,gBAAgB,GAA8B,kBAAkB,CAAC,MAAM,CAAC,gBAAgB,IAAI,wCAAyB,CAAA;oBACrH,YAAY,GAAkB,kBAAkB,CAAC,MAAM,CAAC,YAAY,IAAI,EAAE,CAAA;oBAC1E,cAAc,GAAkB,kBAAkB,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAA;oBAC9E,kBAAkB,GAAY,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,KAAK,SAAS;wBAC1F,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC;wBACvD,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,kBAAkB,CAAA;oBAGzC,aAAa,GAA4B;wBAC3C,YAAY,cAAA;wBACZ,uBAAuB,yBAAA;wBACvB,mBAAmB,qBAAA;wBACnB,mBAAmB,qBAAA;wBACnB,YAAY,cAAA;wBACZ,QAAQ,UAAA;wBACR,YAAY,EAAE,cAAc;wBAC5B,cAAc,gBAAA;wBACd,oBAAoB,sBAAA;wBACpB,kBAAkB,oBAAA;qBACrB,CAAA;oBACoD,WAAM,IAAA,6BAAgB,EAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,EAAA;;oBAApG,oBAAoB,GAA2B,SAAqD;oBAEtG,WAAW,GAeX,oBAAoB,YAfT,EACX,cAAc,GAcd,oBAAoB,eAdN,EACd,UAAU,GAaV,oBAAoB,WAbV,EAEN,KAWJ,oBAAoB,kBAX0F,EAAhG,gBAAgB,sBAAA,EAAE,WAAW,iBAAA,EAAE,WAAW,iBAAA,EAAE,WAAW,iBAAA,EAAE,UAAU,gBAAA,EAAE,YAAY,kBAAA,EAAE,WAAW,iBAAA,EAE5G,SAAS,GAST,oBAAoB,UATX,EACT,4BAA4B,GAQ5B,oBAAoB,6BARQ,EAC5B,KAAK,GAOL,oBAAoB,MAPf,EACL,QAAQ,GAMR,oBAAoB,SANZ,EACR,eAAe,GAKf,oBAAoB,gBALL,EACf,OAAO,GAIP,oBAAoB,QAJb,EACP,IAAI,GAGJ,oBAAoB,KAHhB,EACJ,YAAY,GAEZ,oBAAoB,aAFR,EACZ,eAAe,GACf,oBAAoB,gBADL,CACK;yBAIpB,iBAAiB,EAAjB,cAAiB;oBACC,WAAM,QAAQ,CAAC,kCAAqB,EAAE,OAAO,EAAE,uBAAuB,CAAC,EAAA;;oBAAzF,eAAe,GAAG,SAAuE,CAAA;;wBAI3B,WAAM,IAAA,yCAAwB,EAAC;wBAC7F,gBAAgB,kBAAA;wBAChB,OAAO,SAAA;wBACP,QAAQ,UAAA;wBACR,WAAW,aAAA;wBACX,4BAA4B,8BAAA;wBAC5B,SAAS,WAAA;wBACT,KAAK,OAAA;wBACL,WAAW,aAAA;wBACX,UAAU,YAAA;wBACV,qBAAqB,uBAAA;qBAExB,CAAC,EAAA;;oBAZI,KAA4D,SAYhE,EAZM,WAAW,iBAAA,EAAE,UAAU,gBAAA,EAAE,4BAA4B,kCAAA;yBAiBzD,CAAA,iBAAiB,IAAI,eAAe,CAAA,EAApC,cAAoC;oBACpC,WAAM,QAAQ,CAAC,6BAAgB,EAAE,eAAe,CAAC,EAAA;;oBAAjD,SAAiD,CAAA;;;oBAIrD,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC9C,KAAoB,IAAA,4BAAiB,EAAC,WAAW,CAAC,EAAhD,MAAM,YAAA,EAAE,KAAK,WAAA,CAAmC;wBACxD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAA;wBACxB,UAAU,CAAC,MAAM,GAAG,MAAM,CAAA;wBAC1B,UAAU,CAAC,CAAC,GAAG,CAAC,CAAA;wBAChB,UAAU,CAAC,CAAC,GAAG,CAAC,CAAA;wBAChB,OAAO,CAAC,KAAK,CAAC,6GAAoG,KAAK,0BAAgB,MAAM,iBAAY,CAAC,CAAA;oBAC9J,CAAC;oBAI0B,WAAM,IAAA,kCAAsB,EAAC;4BACpD,kBAAkB,EAAE,KAAK;4BACzB,WAAW,aAAA;4BACX,UAAU,YAAA;4BACV,gBAAgB,EAAE,gBAAgB,IAAI,GAAG;4BACzC,4BAA4B,8BAAA;4BAC5B,KAAK,OAAA;4BACL,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,UAAU,YAAA;4BACV,gBAAgB,kBAAA;yBACnB,CAAC,EAAA;;oBAXI,kBAAkB,GAAG,SAWzB;oBAGI,YAAY,GAA2B;wBACzC,YAAY,EAAE,OAAO,CAAC,YAAY;wBAClC,WAAW,EAAE,kBAAkB;wBAC/B,mBAAmB,qBAAA;wBACnB,mBAAmB,qBAAA;wBACnB,QAAQ,EAAE;4BACN,WAAW,aAAA;4BACX,UAAU,YAAA;4BACV,QAAQ,UAAA;4BACR,eAAe,EAAE,eAAe;yBACnC;wBACD,QAAQ,EAAE;4BACN,WAAW,aAAA;4BACX,cAAc,gBAAA;4BACd,UAAU,YAAA;4BACV,gBAAgB,EAAE,gBAAgB,IAAI,GAAG;4BACzC,eAAe,iBAAA;4BACf,QAAQ,UAAA;4BACR,eAAe,iBAAA;4BACf,OAAO,SAAA;4BACP,IAAI,MAAA;4BACJ,WAAW,EAAE,WAAW,IAAI,GAAG;4BAC/B,UAAU,EAAE,UAAU,IAAI,GAAG;4BAC7B,YAAY,cAAA;4BACZ,eAAe,iBAAA;4BACf,YAAY,EAAE,YAAY,IAAI,GAAG;4BACjC,WAAW,EAAE,WAAW,IAAI,GAAG;4BAC/B,GAAG,KAAA;yBACN;wBACD,YAAY,cAAA;wBACZ,cAAc,gBAAA;wBACd,WAAW,aAAA;wBACX,eAAe,EAAE,KAAK;wBACtB,QAAQ,UAAA;wBACR,YAAY,EAAE,YAAY,CAAC,YAAY;wBACvC,cAAc,gBAAA;qBACjB,CAAA;oBAGD,WAAO,IAAA,4BAAe,EAAC,QAAQ,EAAE,YAAY,CAAC,EAAA;;;;CACjD;AA7JD,iCA6JC","sourcesContent":["import { takeWebElementScreenshot } from '../methods/screenshots.js'\nimport { makeCroppedBase64Image } from '../methods/images.js'\nimport beforeScreenshot from '../helpers/beforeScreenshot.js'\nimport afterScreenshot from '../helpers/afterScreenshot.js'\nimport type { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces.js'\nimport type { Methods } from '../methods/methods.interfaces.js'\nimport type { InstanceData } from '../methods/instanceData.interfaces.js'\nimport type { Folders } from '../base.interfaces.js'\nimport type { SaveElementOptions, WicElement } from './element.interfaces.js'\nimport type { BeforeScreenshotOptions, BeforeScreenshotResult } from '../helpers/beforeScreenshot.interfaces.js'\nimport { DEFAULT_RESIZE_DIMENSIONS } from '../helpers/constants.js'\nimport type { ResizeDimensions } from '../methods/images.interfaces.js'\nimport scrollElementIntoView from '../clientSideScripts/scrollElementIntoView.js'\nimport { getScreenshotSize } from '../helpers/utils.js'\nimport scrollToPosition from '../clientSideScripts/scrollToPosition.js'\n\n/**\n * Saves an image of an element\n */\nexport default async function saveWebElement(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    element: HTMLElement | WicElement,\n    tag: string,\n    saveElementOptions: SaveElementOptions,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isNativeContext: boolean,\n): Promise<ScreenshotOutput> {\n    // 1a. Set some variables\n    const { addressBarShadowPadding, autoElementScroll, formatImageName, logLevel, savePerInstance, toolBarShadowPadding } =\n        saveElementOptions.wic\n    const { executor, screenShot, takeElementScreenshot } = methods\n    // 1b. Set the method options to the right values\n    const disableCSSAnimation: boolean = saveElementOptions.method.disableCSSAnimation !== undefined\n        ? Boolean(saveElementOptions.method.disableCSSAnimation)\n        : saveElementOptions.wic.disableCSSAnimation\n    const enableLayoutTesting: boolean = saveElementOptions.method.enableLayoutTesting !== undefined\n        ? Boolean(saveElementOptions.method.enableLayoutTesting)\n        : saveElementOptions.wic.enableLayoutTesting\n    const hideScrollBars: boolean = saveElementOptions.method.hideScrollBars !== undefined\n        ? Boolean(saveElementOptions.method.hideScrollBars)\n        : saveElementOptions.wic.hideScrollBars\n    const resizeDimensions: ResizeDimensions | number = saveElementOptions.method.resizeDimensions || DEFAULT_RESIZE_DIMENSIONS\n    const hideElements: HTMLElement[] = saveElementOptions.method.hideElements || []\n    const removeElements: HTMLElement[] = saveElementOptions.method.removeElements || []\n    const waitForFontsLoaded: boolean = saveElementOptions.method.waitForFontsLoaded !== undefined\n        ? Boolean(saveElementOptions.method.waitForFontsLoaded)\n        : saveElementOptions.wic.waitForFontsLoaded\n\n    // 2.  Prepare the beforeScreenshot\n    const beforeOptions: BeforeScreenshotOptions = {\n        instanceData,\n        addressBarShadowPadding,\n        disableCSSAnimation,\n        enableLayoutTesting,\n        hideElements,\n        logLevel,\n        noScrollBars: hideScrollBars,\n        removeElements,\n        toolBarShadowPadding,\n        waitForFontsLoaded,\n    }\n    const enrichedInstanceData: BeforeScreenshotResult = await beforeScreenshot(executor, beforeOptions, true)\n    const {\n        browserName,\n        browserVersion,\n        deviceName,\n        dimensions: {\n            window: { devicePixelRatio, innerHeight, isLandscape, outerHeight, outerWidth, screenHeight, screenWidth },\n        },\n        isAndroid,\n        isAndroidNativeWebScreenshot,\n        isIOS,\n        isMobile,\n        isTestInBrowser,\n        logName,\n        name,\n        platformName,\n        platformVersion,\n    } = enrichedInstanceData\n\n    // Scroll the element into top of the viewport and return the current scroll position\n    let currentPosition: number | undefined\n    if (autoElementScroll) {\n        currentPosition = await executor(scrollElementIntoView, element, addressBarShadowPadding)\n    }\n\n    // 3.  Take the screenshot and determine the rectangles\n    const { base64Image, rectangles, isWebDriverElementScreenshot } = await takeWebElementScreenshot({\n        devicePixelRatio,\n        element,\n        executor,\n        innerHeight,\n        isAndroidNativeWebScreenshot,\n        isAndroid,\n        isIOS,\n        isLandscape,\n        screenShot,\n        takeElementScreenshot,\n\n    })\n\n    // When the screenshot has been taken and the element position has been determined,\n    // we can scroll back to the original position\n    // We don't need to wait for the scroll here because we don't take a screenshot after this\n    if (autoElementScroll && currentPosition) {\n        await executor(scrollToPosition, currentPosition)\n    }\n\n    // When the element has no height or width, we default to the viewport screen size\n    if (rectangles.width === 0 || rectangles.height === 0) {\n        const { height, width } = getScreenshotSize(base64Image)\n        rectangles.width = width\n        rectangles.height = height\n        rectangles.x = 0\n        rectangles.y = 0\n        console.error(`\\x1b[31m\\nThe element has no width or height. We defaulted to the viewport screen size of width: ${width} and height: ${height}.\\x1b[0m\\n`)\n    }\n\n    // 5.  Make a cropped base64 image with resizeDimensions\n    // @TODO: we have isLandscape here\n    const croppedBase64Image = await makeCroppedBase64Image({\n        addIOSBezelCorners: false,\n        base64Image,\n        deviceName,\n        devicePixelRatio: devicePixelRatio || NaN,\n        isWebDriverElementScreenshot,\n        isIOS,\n        isLandscape,\n        logLevel,\n        rectangles,\n        resizeDimensions,\n    })\n\n    // 6.  The after the screenshot methods\n    const afterOptions: AfterScreenshotOptions = {\n        actualFolder: folders.actualFolder,\n        base64Image: croppedBase64Image,\n        disableCSSAnimation,\n        enableLayoutTesting,\n        filePath: {\n            browserName,\n            deviceName,\n            isMobile,\n            savePerInstance: savePerInstance,\n        },\n        fileName: {\n            browserName,\n            browserVersion,\n            deviceName,\n            devicePixelRatio: devicePixelRatio || NaN,\n            formatImageName,\n            isMobile,\n            isTestInBrowser,\n            logName,\n            name,\n            outerHeight: outerHeight || NaN,\n            outerWidth: outerWidth || NaN,\n            platformName,\n            platformVersion,\n            screenHeight: screenHeight || NaN,\n            screenWidth: screenWidth || NaN,\n            tag,\n        },\n        hideElements,\n        hideScrollBars,\n        isLandscape,\n        isNativeContext: false,\n        logLevel,\n        platformName: instanceData.platformName,\n        removeElements,\n    }\n\n    // 7.  Return the data\n    return afterScreenshot(executor, afterOptions)\n}\n"]}