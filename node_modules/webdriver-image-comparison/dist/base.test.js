"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var fs_extra_1 = require("fs-extra");
var base_js_1 = __importDefault(require("./base.js"));
vitest_1.vi.mock('fs-extra', function () { return ({
    removeSync: vitest_1.vi.fn(),
}); });
(0, vitest_1.describe)('BaseClass', function () {
    (0, vitest_1.it)('initializes default options correctly', function () {
        var options = {};
        var instance = new base_js_1.default(options);
        (0, vitest_1.expect)(instance.defaultOptions).toMatchSnapshot();
    });
    (0, vitest_1.it)('initializes folders with default values', function () {
        var instance = new base_js_1.default({});
        (0, vitest_1.expect)(instance.folders.actualFolder).toMatchSnapshot();
        (0, vitest_1.expect)(instance.folders.baselineFolder).toMatchSnapshot();
        (0, vitest_1.expect)(instance.folders.diffFolder).toMatchSnapshot();
    });
    (0, vitest_1.it)('initializes folders with custom values', function () {
        var options = {
            baselineFolder: 'custom/baseline',
            screenshotPath: 'custom/screenshots',
        };
        var instance = new base_js_1.default(options);
        (0, vitest_1.expect)(instance.folders.baselineFolder).toBe('custom/baseline');
        (0, vitest_1.expect)(instance.folders.actualFolder).toContain('custom/screenshots');
    });
    (0, vitest_1.it)('handles functional baselineFolder and screenshotPath', function () {
        var options = {
            baselineFolder: function () { return 'functional/baseline'; },
            screenshotPath: function () { return 'functional/screenshots'; },
        };
        var instance = new base_js_1.default(options);
        (0, vitest_1.expect)(instance.folders.baselineFolder).toBe('functional/baseline');
        (0, vitest_1.expect)(instance.folders.actualFolder).toContain('functional/screenshots');
    });
    (0, vitest_1.it)('clears runtime folders if clearRuntimeFolder is true', function () {
        var options = {
            clearRuntimeFolder: true,
        };
        new base_js_1.default(options);
        (0, vitest_1.expect)(fs_extra_1.removeSync).toHaveBeenCalledTimes(2);
    });
});
//# sourceMappingURL=base.test.js.map