{"version":3,"file":"base.test.js","sourceRoot":"","sources":["../src/base.test.ts"],"names":[],"mappings":";;;;;AAAA,iCAAiD;AACjD,qCAAqC;AACrC,sDAAiC;AAEjC,WAAE,CAAC,IAAI,CAAC,UAAU,EAAE,cAAM,OAAA,CAAC;IACvB,UAAU,EAAE,WAAE,CAAC,EAAE,EAAE;CACtB,CAAC,EAFwB,CAExB,CAAC,CAAA;AAEH,IAAA,iBAAQ,EAAC,WAAW,EAAE;IAClB,IAAA,WAAE,EAAC,uCAAuC,EAAE;QACxC,IAAM,OAAO,GAAG,EAAG,CAAA;QACnB,IAAM,QAAQ,GAAG,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAA;QAEvC,IAAA,eAAM,EAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,eAAe,EAAE,CAAA;IACrD,CAAC,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,yCAAyC,EAAE;QAC1C,IAAM,QAAQ,GAAG,IAAI,iBAAS,CAAC,EAAE,CAAC,CAAA;QAElC,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,eAAe,EAAE,CAAA;QACvD,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,eAAe,EAAE,CAAA;QACzD,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAA;IACzD,CAAC,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,wCAAwC,EAAE;QACzC,IAAM,OAAO,GAAG;YACZ,cAAc,EAAE,iBAAiB;YACjC,cAAc,EAAE,oBAAoB;SACvC,CAAA;QACD,IAAM,QAAQ,GAAG,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAA;QAEvC,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;QAC/D,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAA;IACzE,CAAC,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,sDAAsD,EAAE;QACvD,IAAM,OAAO,GAAG;YACZ,cAAc,EAAE,cAAM,OAAA,qBAAqB,EAArB,CAAqB;YAC3C,cAAc,EAAE,cAAM,OAAA,wBAAwB,EAAxB,CAAwB;SACjD,CAAA;QACD,IAAM,QAAQ,GAAG,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAA;QAEvC,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;QACnE,IAAA,eAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAA;IAC7E,CAAC,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,sDAAsD,EAAE;QACvD,IAAM,OAAO,GAAG;YACZ,kBAAkB,EAAE,IAAI;SAC3B,CAAA;QACD,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAA;QAEtB,IAAA,eAAM,EAAC,qBAAU,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import { describe, it, expect, vi } from 'vitest'\nimport { removeSync } from 'fs-extra'\nimport BaseClass from './base.js'\n\nvi.mock('fs-extra', () => ({\n    removeSync: vi.fn(),\n}))\n\ndescribe('BaseClass', () => {\n    it('initializes default options correctly', () => {\n        const options = { }\n        const instance = new BaseClass(options)\n\n        expect(instance.defaultOptions).toMatchSnapshot()\n    })\n\n    it('initializes folders with default values', () => {\n        const instance = new BaseClass({})\n\n        expect(instance.folders.actualFolder).toMatchSnapshot()\n        expect(instance.folders.baselineFolder).toMatchSnapshot()\n        expect(instance.folders.diffFolder).toMatchSnapshot()\n    })\n\n    it('initializes folders with custom values', () => {\n        const options = {\n            baselineFolder: 'custom/baseline',\n            screenshotPath: 'custom/screenshots',\n        }\n        const instance = new BaseClass(options)\n\n        expect(instance.folders.baselineFolder).toBe('custom/baseline')\n        expect(instance.folders.actualFolder).toContain('custom/screenshots')\n    })\n\n    it('handles functional baselineFolder and screenshotPath', () => {\n        const options = {\n            baselineFolder: () => 'functional/baseline',\n            screenshotPath: () => 'functional/screenshots',\n        }\n        const instance = new BaseClass(options)\n\n        expect(instance.folders.baselineFolder).toBe('functional/baseline')\n        expect(instance.folders.actualFolder).toContain('functional/screenshots')\n    })\n\n    it('clears runtime folders if clearRuntimeFolder is true', () => {\n        const options = {\n            clearRuntimeFolder: true,\n        }\n        new BaseClass(options)\n\n        expect(removeSync).toHaveBeenCalledTimes(2)\n    })\n})\n"]}